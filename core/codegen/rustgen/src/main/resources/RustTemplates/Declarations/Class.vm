use codegen_runtime::*;

/* types */
#foreach( $typeDecl in $node.getTypeDecls() )
$RustFormat.format($typeDecl)
#end
##
#set( $instanceVars = $Util.getInstanceVarFields($node.getFields()) )
#set( $staticVars = $Util.getStaticVarFields($node.getFields()) )
#set( $values = $Util.getValueFields($node.getFields()) )
#set( $hasInstanceVars = !$instanceVars.isEmpty())
##
#if( !$values.isEmpty() )
/* values */
lazy_static! {
	#foreach( $valueField in $values )
	$valueField.getAccess() static ref $valueField.getName(): $RustFormat.format($valueField.getType()) = $RustFormat.formatInitialExp($valueField.getInitial());
	#end
}

#end
##
#[derive(PartialEq, Eq, Clone, Hash, Debug)]
$node.getAccess() struct $node.getName() #if(!$hasInstanceVars);#else {
	#foreach( $field in $instanceVars )
	$RustFormat.format($field),
	#end
}
#end

impl $node.getName() {
/* operations */
	#foreach( $method in $node.getMethods() )
	$RustFormat.format($method)
	#end
	##

/* functions */
	#foreach( $func in $node.getFunctions() )
	$RustFormat.format($func)
	#end
}

impl Default for $node.getName() {
	fn default() -> $node.getName() {
		#foreach( $field in $instanceVars )		
		let $field.getName(): $RustFormat.format($field.getType()) = $RustFormat.formatInitialExp($field.getInitial());
		#end
		
		$node.getName()
		#if($hasInstanceVars)
		{
			#foreach( $field in $instanceVars )
			$field.getName(): $field.getName(),
			#end
		}
		#end		
	}
}
	

	