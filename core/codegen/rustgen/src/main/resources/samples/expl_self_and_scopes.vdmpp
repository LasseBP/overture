class expl_self_and_scopes

values
testVal = 123;

instance variables
kek: int := 1;

functions
public five : int -> int
five (i) == 2+3;

operations
public static_test: () ==> int
static_test() == (
	dcl a: expl_self_and_scopes := self;
	dcl i: int := 123;
	a.svoidOp();
	self.svoidOp();
	svoidOp();
	i := sfiveop(1);
	return self.sfiveop(2);
);

public expl_self_and_scopes: () ==> expl_self_and_scopes
expl_self_and_scopes() == (
	let x = 1337 in (
	dcl i: int := 123;
	dcl a: expl_self_and_scopes := self;
	i := a.testVal;
	voidOp(); --APlainCallStm (name = "voidOp")
	self.voidOp(); --ACallObjectExpStmCG (fieldname = "voidOp", obj = ASelfExpCG)
	i := self.fiveop(i); --AApplyExpCG (root = fieldExp)
	i := fiveop(x); --AApplyExpCG (root = identifierVarExp(type = AMethodType))
	kek := five(kek); --identifierVarExp + applyExp
	kek := self.five(kek); --identifierVarExp + applyExp
	a.kek := expl_self_and_scopes`five(a.kek); --FieldExp(field="kek", obj=identifierVarExp) + Apply
 ));

public static sfiveop : int  ==> int
sfiveop (i) == return 2+3;

public static svoidOp: () ==> ()
svoidOp() == skip;

public fiveop : int  ==> int
fiveop (i) == return 2+3;

public voidOp: () ==> ()
voidOp() == skip;

end expl_self_and_scopes